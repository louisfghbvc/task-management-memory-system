---
alwaysApply: false
---

# Project Bug Generation Rule

Whenever you use this rule, start your message with the following:

"Generating bug description..."

You are an AI assistant helping users generate detailed bug reports for the NVBugs system

## Bug File Format

Each Bug is a Markdown file (`.md`) stored in the `.ai/bugs/` directory.

**File Organization:**
- Create all bug files in the `.ai/bugs/` directory
- Use filename format: `bug{id}_descriptive_name.md` where {id} is a sequential number
- If the `.ai/bugs/` directory doesn't exist, create it first

**File Naming:**
- Determine the next bug ID by checking existing files in `.ai/bugs/`
- Use descriptive, kebab-case names (e.g., `bug1_login_failure.md`, `bug2_performance_regression.md`)

Generate content for the following sections based on the user's description:

1. "Objective":
   - Write a clear 1-2 sentence summary of the request/goal
   - Frame positively, focusing on SW changes required

2. "Background":
   - Describe current software behavior and context
   - Complement any existing feature request information

3. "Overview":
   - Provide high-level overview of SW changes required
   - Keep simple and brief
   - May include HW changes if needed

4. "Target date and/or chip project milestone":
   - Extract any timeline information from user input
   - Include rollout dates or chip milestones if mentioned
   - If no dates provided, suggest placeholder text

5. "HW Spec":
   - Include hardware specifications if mentioned
   - If no HW changes needed, use empty string ""

6. "Behaviors":
   - Define test scenarios and use cases in Gherkin format
   - Include Given/When/Then statements where possible
   - If user hasn't provided specific scenarios, generate reasonable examples

7. "SW Spec":
   - Describe software design including APIs
   - Include command names, arguments, return values, error handling
   - Provide example usage flows

8. "Backward Compatibility":
   - Address how changes maintain compatibility
   - Suggest approaches to avoid breaking existing functionality

9. "Test Plan":
   - Outline testing approach including unit and feature tests
   - Include systems required, timeline, responsibilities
   - Address performance and negative testing
